// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.36.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'error.dart';
import 'frb_generated.dart';
import 'model.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// The type `BindingEventListener` is not used by any `pub` functions, thus it is ignored.
// The type `DartBindingLogger` is not used by any `pub` functions, thus it is ignored.

Future<BindingLiquidSdk> connect({required ConnectRequest req, dynamic hint}) =>
    RustLib.instance.api.crateBindingsConnect(req: req, hint: hint);

/// If used, this must be called before `connect`. It can only be called once.
Stream<LogEntry> breezLogStream({dynamic hint}) =>
    RustLib.instance.api.crateBindingsBreezLogStream(hint: hint);

Config defaultConfig({required Network network, dynamic hint}) =>
    RustLib.instance.api.crateBindingsDefaultConfig(network: network, hint: hint);

LNInvoice parseInvoice({required String input, dynamic hint}) =>
    RustLib.instance.api.crateBindingsParseInvoice(input: input, hint: hint);

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>
@sealed
class BindingLiquidSdk extends RustOpaque {
  BindingLiquidSdk.dcoDecode(List<dynamic> wire) : super.dcoDecode(wire, _kStaticData);

  BindingLiquidSdk.sseDecode(BigInt ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_BindingLiquidSdk,
    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_BindingLiquidSdk,
    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_BindingLiquidSdkPtr,
  );

  Stream<LiquidSdkEvent> addEventListener({dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkAddEventListener(that: this, hint: hint);

  void backup({required BackupRequest req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkBackup(that: this, req: req, hint: hint);

  Future<void> disconnect({dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkDisconnect(that: this, hint: hint);

  void emptyWalletCache({dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkEmptyWalletCache(that: this, hint: hint);

  Future<GetInfoResponse> getInfo({required GetInfoRequest req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkGetInfo(that: this, req: req, hint: hint);

  Future<List<Payment>> listPayments({dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkListPayments(that: this, hint: hint);

  Future<PrepareReceiveResponse> prepareReceivePayment({required PrepareReceiveRequest req, dynamic hint}) =>
      RustLib.instance.api
          .crateBindingsBindingLiquidSdkPrepareReceivePayment(that: this, req: req, hint: hint);

  Future<PrepareSendResponse> prepareSendPayment({required PrepareSendRequest req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkPrepareSendPayment(that: this, req: req, hint: hint);

  Future<ReceivePaymentResponse> receivePayment({required PrepareReceiveResponse req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkReceivePayment(that: this, req: req, hint: hint);

  void restore({required RestoreRequest req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkRestore(that: this, req: req, hint: hint);

  Future<SendPaymentResponse> sendPayment({required PrepareSendResponse req, dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkSendPayment(that: this, req: req, hint: hint);

  Future<void> sync({dynamic hint}) =>
      RustLib.instance.api.crateBindingsBindingLiquidSdkSync(that: this, hint: hint);
}
