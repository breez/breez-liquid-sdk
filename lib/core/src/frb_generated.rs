// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.38.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value
)]

// Section: imports

use crate::bindings::*;
use crate::model::EventListener;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.38";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 802195911;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__bindings__BindingLiquidSdk_add_event_listener_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    listener: impl CstDecode<
        StreamSink<crate::model::LiquidSdkEvent, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_add_event_listener",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_listener = listener.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::add_event_listener(
                            api_that,
                            api_listener,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_backup_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::BackupRequest>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_backup",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            transform_result_dco((move || {
                let mut api_that_decoded = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_decoded = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that = &*api_that_decoded.unwrap();
                crate::bindings::BindingLiquidSdk::backup(api_that, api_req)
            })())
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_disconnect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::disconnect(api_that).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_empty_wallet_cache_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_empty_wallet_cache",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            transform_result_dco((move || {
                let mut api_that_decoded = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_decoded = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that = &*api_that_decoded.unwrap();
                crate::bindings::BindingLiquidSdk::empty_wallet_cache(api_that)
            })())
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_get_info_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_get_info",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::get_info(api_that).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_list_payments_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_list_payments",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::list_payments(api_that).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_lnurl_auth_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req_data: impl CstDecode<crate::LnUrlAuthRequestData>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_lnurl_auth",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req_data = req_data.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::lnurl_auth(api_that, api_req_data).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_lnurl_pay_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::LnUrlPayRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_lnurl_pay",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::lnurl_pay(api_that, api_req).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_lnurl_withdraw_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::LnUrlWithdrawRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_lnurl_withdraw",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::lnurl_withdraw(api_that, api_req).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_prepare_receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::PrepareReceiveRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_prepare_receive_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::prepare_receive_payment(
                            api_that, api_req,
                        )
                        .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_prepare_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::PrepareSendRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_prepare_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::prepare_send_payment(api_that, api_req)
                            .await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_receive_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::PrepareReceiveResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_receive_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::receive_payment(api_that, api_req).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_restore_impl(
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::RestoreRequest>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_restore",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            transform_result_dco((move || {
                let mut api_that_decoded = None;
                let decode_indices_ =
                    flutter_rust_bridge::for_generated::lockable_compute_decode_order(vec![
                        flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                            &api_that, 0, false,
                        ),
                    ]);
                for i in decode_indices_ {
                    match i {
                        0 => api_that_decoded = Some(api_that.lockable_decode_sync_ref()),
                        _ => unreachable!(),
                    }
                }
                let api_that = &*api_that_decoded.unwrap();
                crate::bindings::BindingLiquidSdk::restore(api_that, api_req)
            })())
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_send_payment_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
    req: impl CstDecode<crate::model::PrepareSendResponse>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_send_payment",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::send_payment(api_that, api_req).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__BindingLiquidSdk_sync_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<
        RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "BindingLiquidSdk_sync",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move {
                        let mut api_that_decoded = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_that, 0, false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_that_decoded =
                                        Some(api_that.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_that = &*api_that_decoded.unwrap();
                        crate::bindings::BindingLiquidSdk::sync(api_that).await
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__bindings__binding_event_listener_on_event_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::bindings::BindingEventListener>,
    e: impl CstDecode<crate::model::LiquidSdkEvent>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "binding_event_listener_on_event",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_e = e.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok({
                        crate::bindings::BindingEventListener::on_event(&api_that, api_e);
                    })
                })())
            }
        },
    )
}
fn wire__crate__bindings__breez_log_stream_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    s: impl CstDecode<StreamSink<crate::model::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "breez_log_stream", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { let api_s = s.cst_decode(); move |context|  {
                    transform_result_dco((move ||  {
                         crate::bindings::breez_log_stream(api_s)
                    })())
                } })
}
fn wire__crate__bindings__connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    req: impl CstDecode<crate::model::ConnectRequest>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_req = req.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move { crate::bindings::connect(api_req).await })().await,
                )
            }
        },
    )
}
fn wire__crate__bindings__default_config_impl(
    network: impl CstDecode<crate::model::LiquidNetwork>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "default_config",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_network = network.cst_decode();
            transform_result_dco((move || {
                Result::<_, ()>::Ok(crate::bindings::default_config(api_network))
            })())
        },
    )
}
fn wire__crate__bindings__parse_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    input: impl CstDecode<String>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::DcoCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_input = input.cst_decode();
            move |context| async move {
                transform_result_dco(
                    (move || async move { crate::bindings::parse(api_input).await })().await,
                )
            }
        },
    )
}
fn wire__crate__bindings__parse_invoice_impl(
    input: impl CstDecode<String>,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartDco {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::DcoCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "parse_invoice",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let api_input = input.cst_decode();
            transform_result_dco((move || crate::bindings::parse_invoice(api_input))())
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let AesSuccessActionDataDecrypted = None::<crate::AesSuccessActionDataDecrypted>.unwrap();
        let _: String = AesSuccessActionDataDecrypted.description;
        let _: String = AesSuccessActionDataDecrypted.plaintext;
    }
    match None::<crate::AesSuccessActionDataResult>.unwrap() {
        crate::AesSuccessActionDataResult::Decrypted { data } => {
            let _: crate::AesSuccessActionDataDecrypted = data;
        }
        crate::AesSuccessActionDataResult::ErrorStatus { reason } => {
            let _: String = reason;
        }
    }
    {
        let BitcoinAddressData = None::<crate::BitcoinAddressData>.unwrap();
        let _: String = BitcoinAddressData.address;
        let _: crate::Network = BitcoinAddressData.network;
        let _: Option<u64> = BitcoinAddressData.amount_sat;
        let _: Option<String> = BitcoinAddressData.label;
        let _: Option<String> = BitcoinAddressData.message;
    }
    match None::<crate::InputType>.unwrap() {
        crate::InputType::BitcoinAddress { address } => {
            let _: crate::BitcoinAddressData = address;
        }
        crate::InputType::Bolt11 { invoice } => {
            let _: crate::LNInvoice = invoice;
        }
        crate::InputType::NodeId { node_id } => {
            let _: String = node_id;
        }
        crate::InputType::Url { url } => {
            let _: String = url;
        }
        crate::InputType::LnUrlPay { data } => {
            let _: crate::LnUrlPayRequestData = data;
        }
        crate::InputType::LnUrlWithdraw { data } => {
            let _: crate::LnUrlWithdrawRequestData = data;
        }
        crate::InputType::LnUrlAuth { data } => {
            let _: crate::LnUrlAuthRequestData = data;
        }
        crate::InputType::LnUrlError { data } => {
            let _: crate::LnUrlErrorData = data;
        }
    }
    {
        let LNInvoice = None::<crate::LNInvoice>.unwrap();
        let _: String = LNInvoice.bolt11;
        let _: crate::Network = LNInvoice.network;
        let _: String = LNInvoice.payee_pubkey;
        let _: String = LNInvoice.payment_hash;
        let _: Option<String> = LNInvoice.description;
        let _: Option<String> = LNInvoice.description_hash;
        let _: Option<u64> = LNInvoice.amount_msat;
        let _: u64 = LNInvoice.timestamp;
        let _: u64 = LNInvoice.expiry;
        let _: Vec<crate::RouteHint> = LNInvoice.routing_hints;
        let _: Vec<u8> = LNInvoice.payment_secret;
        let _: u64 = LNInvoice.min_final_cltv_expiry_delta;
    }
    {
        let LnUrlAuthRequestData = None::<crate::LnUrlAuthRequestData>.unwrap();
        let _: String = LnUrlAuthRequestData.k1;
        let _: Option<String> = LnUrlAuthRequestData.action;
        let _: String = LnUrlAuthRequestData.domain;
        let _: String = LnUrlAuthRequestData.url;
    }
    {
        let LnUrlErrorData = None::<crate::LnUrlErrorData>.unwrap();
        let _: String = LnUrlErrorData.reason;
    }
    {
        let LnUrlPayErrorData = None::<crate::LnUrlPayErrorData>.unwrap();
        let _: String = LnUrlPayErrorData.payment_hash;
        let _: String = LnUrlPayErrorData.reason;
    }
    {
        let LnUrlPayRequest = None::<crate::LnUrlPayRequest>.unwrap();
        let _: crate::LnUrlPayRequestData = LnUrlPayRequest.data;
        let _: u64 = LnUrlPayRequest.amount_msat;
        let _: Option<String> = LnUrlPayRequest.comment;
        let _: Option<String> = LnUrlPayRequest.payment_label;
    }
    {
        let LnUrlPayRequestData = None::<crate::LnUrlPayRequestData>.unwrap();
        let _: String = LnUrlPayRequestData.callback;
        let _: u64 = LnUrlPayRequestData.min_sendable;
        let _: u64 = LnUrlPayRequestData.max_sendable;
        let _: String = LnUrlPayRequestData.metadata_str;
        let _: u16 = LnUrlPayRequestData.comment_allowed;
        let _: String = LnUrlPayRequestData.domain;
        let _: bool = LnUrlPayRequestData.allows_nostr;
        let _: Option<String> = LnUrlPayRequestData.nostr_pubkey;
        let _: Option<String> = LnUrlPayRequestData.ln_address;
    }
    {
        let LnUrlWithdrawRequest = None::<crate::LnUrlWithdrawRequest>.unwrap();
        let _: crate::LnUrlWithdrawRequestData = LnUrlWithdrawRequest.data;
        let _: u64 = LnUrlWithdrawRequest.amount_msat;
        let _: Option<String> = LnUrlWithdrawRequest.description;
    }
    {
        let LnUrlWithdrawRequestData = None::<crate::LnUrlWithdrawRequestData>.unwrap();
        let _: String = LnUrlWithdrawRequestData.callback;
        let _: String = LnUrlWithdrawRequestData.k1;
        let _: String = LnUrlWithdrawRequestData.default_description;
        let _: u64 = LnUrlWithdrawRequestData.min_withdrawable;
        let _: u64 = LnUrlWithdrawRequestData.max_withdrawable;
    }
    {
        let MessageSuccessActionData = None::<crate::MessageSuccessActionData>.unwrap();
        let _: String = MessageSuccessActionData.message;
    }
    {
        let RouteHint = None::<crate::RouteHint>.unwrap();
        let _: Vec<crate::RouteHintHop> = RouteHint.hops;
    }
    {
        let RouteHintHop = None::<crate::RouteHintHop>.unwrap();
        let _: String = RouteHintHop.src_node_id;
        let _: u64 = RouteHintHop.short_channel_id;
        let _: u32 = RouteHintHop.fees_base_msat;
        let _: u32 = RouteHintHop.fees_proportional_millionths;
        let _: u64 = RouteHintHop.cltv_expiry_delta;
        let _: Option<u64> = RouteHintHop.htlc_minimum_msat;
        let _: Option<u64> = RouteHintHop.htlc_maximum_msat;
    }
    match None::<crate::SuccessActionProcessed>.unwrap() {
        crate::SuccessActionProcessed::Aes { result } => {
            let _: crate::AesSuccessActionDataResult = result;
        }
        crate::SuccessActionProcessed::Message { data } => {
            let _: crate::MessageSuccessActionData = data;
        }
        crate::SuccessActionProcessed::Url { data } => {
            let _: crate::UrlSuccessActionData = data;
        }
    }
    {
        let UrlSuccessActionData = None::<crate::UrlSuccessActionData>.unwrap();
        let _: String = UrlSuccessActionData.description;
        let _: String = UrlSuccessActionData.url;
    }
};

// Section: dart2rust

impl CstDecode<bool> for bool {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<f32> for f32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> f32 {
        self
    }
}
impl CstDecode<i32> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<crate::model::LiquidNetwork> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::model::LiquidNetwork {
        match self {
            0 => crate::model::LiquidNetwork::Mainnet,
            1 => crate::model::LiquidNetwork::Testnet,
            _ => unreachable!("Invalid variant for LiquidNetwork: {}", self),
        }
    }
}
impl CstDecode<crate::Network> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::Network {
        match self {
            0 => crate::Network::Bitcoin,
            1 => crate::Network::Testnet,
            2 => crate::Network::Signet,
            3 => crate::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", self),
        }
    }
}
impl CstDecode<crate::model::PaymentState> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::model::PaymentState {
        match self {
            0 => crate::model::PaymentState::Created,
            1 => crate::model::PaymentState::Pending,
            2 => crate::model::PaymentState::Complete,
            3 => crate::model::PaymentState::Failed,
            4 => crate::model::PaymentState::TimedOut,
            _ => unreachable!("Invalid variant for PaymentState: {}", self),
        }
    }
}
impl CstDecode<crate::model::PaymentType> for i32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::model::PaymentType {
        match self {
            0 => crate::model::PaymentType::Receive,
            1 => crate::model::PaymentType::Send,
            _ => unreachable!("Invalid variant for PaymentType: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u32> for u32 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u32 {
        self
    }
}
impl CstDecode<u64> for u64 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u64 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for BindingLiquidSdk {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueNom<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return unsafe { decode_rust_opaque_nom(inner) };
    }
}

impl SseDecode
    for StreamSink<crate::model::LiquidSdkEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode
    for StreamSink<crate::model::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_plaintext = <String>::sse_decode(deserializer);
        return crate::AesSuccessActionDataDecrypted {
            description: var_description,
            plaintext: var_plaintext,
        };
    }
}

impl SseDecode for crate::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <crate::AesSuccessActionDataDecrypted>::sse_decode(deserializer);
                return crate::AesSuccessActionDataResult::Decrypted { data: var_data };
            }
            1 => {
                let mut var_reason = <String>::sse_decode(deserializer);
                return crate::AesSuccessActionDataResult::ErrorStatus { reason: var_reason };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::model::BackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backupPath = <Option<String>>::sse_decode(deserializer);
        return crate::model::BackupRequest {
            backup_path: var_backupPath,
        };
    }
}

impl SseDecode for crate::bindings::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_stream = <StreamSink<
            crate::model::LiquidSdkEvent,
            flutter_rust_bridge::for_generated::DcoCodec,
        >>::sse_decode(deserializer);
        return crate::bindings::BindingEventListener { stream: var_stream };
    }
}

impl SseDecode for crate::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_network = <crate::Network>::sse_decode(deserializer);
        let mut var_amountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_label = <Option<String>>::sse_decode(deserializer);
        let mut var_message = <Option<String>>::sse_decode(deserializer);
        return crate::BitcoinAddressData {
            address: var_address,
            network: var_network,
            amount_sat: var_amountSat,
            label: var_label,
            message: var_message,
        };
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::model::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_boltzUrl = <String>::sse_decode(deserializer);
        let mut var_electrumUrl = <String>::sse_decode(deserializer);
        let mut var_workingDir = <String>::sse_decode(deserializer);
        let mut var_network = <crate::model::LiquidNetwork>::sse_decode(deserializer);
        let mut var_paymentTimeoutSec = <u64>::sse_decode(deserializer);
        let mut var_zeroConfMinFeeRate = <f32>::sse_decode(deserializer);
        let mut var_zeroConfMaxAmountSat = <Option<u64>>::sse_decode(deserializer);
        return crate::model::Config {
            boltz_url: var_boltzUrl,
            electrum_url: var_electrumUrl,
            working_dir: var_workingDir,
            network: var_network,
            payment_timeout_sec: var_paymentTimeoutSec,
            zero_conf_min_fee_rate: var_zeroConfMinFeeRate,
            zero_conf_max_amount_sat: var_zeroConfMaxAmountSat,
        };
    }
}

impl SseDecode for crate::model::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_mnemonic = <String>::sse_decode(deserializer);
        let mut var_config = <crate::model::Config>::sse_decode(deserializer);
        return crate::model::ConnectRequest {
            mnemonic: var_mnemonic,
            config: var_config,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::model::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_balanceSat = <u64>::sse_decode(deserializer);
        let mut var_pendingSendSat = <u64>::sse_decode(deserializer);
        let mut var_pendingReceiveSat = <u64>::sse_decode(deserializer);
        let mut var_pubkey = <String>::sse_decode(deserializer);
        return crate::model::GetInfoResponse {
            balance_sat: var_balanceSat,
            pending_send_sat: var_pendingSendSat,
            pending_receive_sat: var_pendingReceiveSat,
            pubkey: var_pubkey,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for crate::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_address = <crate::BitcoinAddressData>::sse_decode(deserializer);
                return crate::InputType::BitcoinAddress {
                    address: var_address,
                };
            }
            1 => {
                let mut var_invoice = <crate::LNInvoice>::sse_decode(deserializer);
                return crate::InputType::Bolt11 {
                    invoice: var_invoice,
                };
            }
            2 => {
                let mut var_nodeId = <String>::sse_decode(deserializer);
                return crate::InputType::NodeId {
                    node_id: var_nodeId,
                };
            }
            3 => {
                let mut var_url = <String>::sse_decode(deserializer);
                return crate::InputType::Url { url: var_url };
            }
            4 => {
                let mut var_data = <crate::LnUrlPayRequestData>::sse_decode(deserializer);
                return crate::InputType::LnUrlPay { data: var_data };
            }
            5 => {
                let mut var_data = <crate::LnUrlWithdrawRequestData>::sse_decode(deserializer);
                return crate::InputType::LnUrlWithdraw { data: var_data };
            }
            6 => {
                let mut var_data = <crate::LnUrlAuthRequestData>::sse_decode(deserializer);
                return crate::InputType::LnUrlAuth { data: var_data };
            }
            7 => {
                let mut var_data = <crate::LnUrlErrorData>::sse_decode(deserializer);
                return crate::InputType::LnUrlError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::model::LiquidNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::model::LiquidNetwork::Mainnet,
            1 => crate::model::LiquidNetwork::Testnet,
            _ => unreachable!("Invalid variant for LiquidNetwork: {}", inner),
        };
    }
}

impl SseDecode for crate::error::LiquidSdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::error::LiquidSdkError::AlreadyStarted;
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::LiquidSdkError::Generic { err: var_err };
            }
            2 => {
                return crate::error::LiquidSdkError::NotStarted;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::model::LiquidSdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentFailed {
                    details: var_details,
                };
            }
            1 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentPending {
                    details: var_details,
                };
            }
            2 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentRefunded {
                    details: var_details,
                };
            }
            3 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentRefundPending {
                    details: var_details,
                };
            }
            4 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentSucceeded {
                    details: var_details,
                };
            }
            5 => {
                let mut var_details = <crate::model::Payment>::sse_decode(deserializer);
                return crate::model::LiquidSdkEvent::PaymentWaitingConfirmation {
                    details: var_details,
                };
            }
            6 => {
                return crate::model::LiquidSdkEvent::Synced;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<crate::model::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::model::Payment>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::RouteHint>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::RouteHintHop>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_bolt11 = <String>::sse_decode(deserializer);
        let mut var_network = <crate::Network>::sse_decode(deserializer);
        let mut var_payeePubkey = <String>::sse_decode(deserializer);
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        let mut var_descriptionHash = <Option<String>>::sse_decode(deserializer);
        let mut var_amountMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_timestamp = <u64>::sse_decode(deserializer);
        let mut var_expiry = <u64>::sse_decode(deserializer);
        let mut var_routingHints = <Vec<crate::RouteHint>>::sse_decode(deserializer);
        let mut var_paymentSecret = <Vec<u8>>::sse_decode(deserializer);
        let mut var_minFinalCltvExpiryDelta = <u64>::sse_decode(deserializer);
        return crate::LNInvoice {
            bolt11: var_bolt11,
            network: var_network,
            payee_pubkey: var_payeePubkey,
            payment_hash: var_paymentHash,
            description: var_description,
            description_hash: var_descriptionHash,
            amount_msat: var_amountMsat,
            timestamp: var_timestamp,
            expiry: var_expiry,
            routing_hints: var_routingHints,
            payment_secret: var_paymentSecret,
            min_final_cltv_expiry_delta: var_minFinalCltvExpiryDelta,
        };
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlAuthError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlAuthError::Generic { err: var_err };
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlAuthError::InvalidUri { err: var_err };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlAuthError::ServiceConnectivity {
                    err: var_err,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_action = <Option<String>>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::LnUrlAuthRequestData {
            k1: var_k1,
            action: var_action,
            domain: var_domain,
            url: var_url,
        };
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::bindings::duplicates::LnUrlCallbackStatus::Ok;
            }
            1 => {
                let mut var_data = <crate::LnUrlErrorData>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlCallbackStatus::ErrorStatus {
                    data: var_data,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::LnUrlErrorData { reason: var_reason };
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlPayError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::bindings::duplicates::LnUrlPayError::AlreadyPaid;
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::Generic { err: var_err };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::InvalidAmount { err: var_err };
            }
            3 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::InvalidInvoice { err: var_err };
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::InvalidNetwork { err: var_err };
            }
            5 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::InvalidUri { err: var_err };
            }
            6 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::InvoiceExpired { err: var_err };
            }
            7 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::PaymentFailed { err: var_err };
            }
            8 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::PaymentTimeout { err: var_err };
            }
            9 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::RouteNotFound { err: var_err };
            }
            10 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::RouteTooExpensive {
                    err: var_err,
                };
            }
            11 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlPayError::ServiceConnectivity {
                    err: var_err,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_paymentHash = <String>::sse_decode(deserializer);
        let mut var_reason = <String>::sse_decode(deserializer);
        return crate::LnUrlPayErrorData {
            payment_hash: var_paymentHash,
            reason: var_reason,
        };
    }
}

impl SseDecode for crate::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::LnUrlPayRequestData>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_comment = <Option<String>>::sse_decode(deserializer);
        let mut var_paymentLabel = <Option<String>>::sse_decode(deserializer);
        return crate::LnUrlPayRequest {
            data: var_data,
            amount_msat: var_amountMsat,
            comment: var_comment,
            payment_label: var_paymentLabel,
        };
    }
}

impl SseDecode for crate::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_minSendable = <u64>::sse_decode(deserializer);
        let mut var_maxSendable = <u64>::sse_decode(deserializer);
        let mut var_metadataStr = <String>::sse_decode(deserializer);
        let mut var_commentAllowed = <u16>::sse_decode(deserializer);
        let mut var_domain = <String>::sse_decode(deserializer);
        let mut var_allowsNostr = <bool>::sse_decode(deserializer);
        let mut var_nostrPubkey = <Option<String>>::sse_decode(deserializer);
        let mut var_lnAddress = <Option<String>>::sse_decode(deserializer);
        return crate::LnUrlPayRequestData {
            callback: var_callback,
            min_sendable: var_minSendable,
            max_sendable: var_maxSendable,
            metadata_str: var_metadataStr,
            comment_allowed: var_commentAllowed,
            domain: var_domain,
            allows_nostr: var_allowsNostr,
            nostr_pubkey: var_nostrPubkey,
            ln_address: var_lnAddress,
        };
    }
}

impl SseDecode for crate::model::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data = <crate::model::LnUrlPaySuccessData>::sse_decode(deserializer);
                return crate::model::LnUrlPayResult::EndpointSuccess { data: var_data };
            }
            1 => {
                let mut var_data = <crate::LnUrlErrorData>::sse_decode(deserializer);
                return crate::model::LnUrlPayResult::EndpointError { data: var_data };
            }
            2 => {
                let mut var_data = <crate::LnUrlPayErrorData>::sse_decode(deserializer);
                return crate::model::LnUrlPayResult::PayError { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::model::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::model::Payment>::sse_decode(deserializer);
        let mut var_successAction =
            <Option<crate::SuccessActionProcessed>>::sse_decode(deserializer);
        return crate::model::LnUrlPaySuccessData {
            payment: var_payment,
            success_action: var_successAction,
        };
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlWithdrawError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::Generic { err: var_err };
            }
            1 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::InvalidAmount {
                    err: var_err,
                };
            }
            2 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::InvalidInvoice {
                    err: var_err,
                };
            }
            3 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::InvalidUri {
                    err: var_err,
                };
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints {
                    err: var_err,
                };
            }
            5 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawError::ServiceConnectivity {
                    err: var_err,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_data = <crate::LnUrlWithdrawRequestData>::sse_decode(deserializer);
        let mut var_amountMsat = <u64>::sse_decode(deserializer);
        let mut var_description = <Option<String>>::sse_decode(deserializer);
        return crate::LnUrlWithdrawRequest {
            data: var_data,
            amount_msat: var_amountMsat,
            description: var_description,
        };
    }
}

impl SseDecode for crate::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_callback = <String>::sse_decode(deserializer);
        let mut var_k1 = <String>::sse_decode(deserializer);
        let mut var_defaultDescription = <String>::sse_decode(deserializer);
        let mut var_minWithdrawable = <u64>::sse_decode(deserializer);
        let mut var_maxWithdrawable = <u64>::sse_decode(deserializer);
        return crate::LnUrlWithdrawRequestData {
            callback: var_callback,
            k1: var_k1,
            default_description: var_defaultDescription,
            min_withdrawable: var_minWithdrawable,
            max_withdrawable: var_maxWithdrawable,
        };
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_data =
                    <crate::bindings::duplicates::LnUrlWithdrawSuccessData>::sse_decode(
                        deserializer,
                    );
                return crate::bindings::duplicates::LnUrlWithdrawResult::Ok { data: var_data };
            }
            1 => {
                let mut var_data = <crate::LnUrlErrorData>::sse_decode(deserializer);
                return crate::bindings::duplicates::LnUrlWithdrawResult::ErrorStatus {
                    data: var_data,
                };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::bindings::duplicates::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <crate::LNInvoice>::sse_decode(deserializer);
        return crate::bindings::duplicates::LnUrlWithdrawSuccessData {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::model::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_line = <String>::sse_decode(deserializer);
        let mut var_level = <String>::sse_decode(deserializer);
        return crate::model::LogEntry {
            line: var_line,
            level: var_level,
        };
    }
}

impl SseDecode for crate::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message = <String>::sse_decode(deserializer);
        return crate::MessageSuccessActionData {
            message: var_message,
        };
    }
}

impl SseDecode for crate::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::Network::Bitcoin,
            1 => crate::Network::Testnet,
            2 => crate::Network::Signet,
            3 => crate::Network::Regtest,
            _ => unreachable!("Invalid variant for Network: {}", inner),
        };
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::SuccessActionProcessed>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<u64>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::model::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_txId = <Option<String>>::sse_decode(deserializer);
        let mut var_swapId = <Option<String>>::sse_decode(deserializer);
        let mut var_timestamp = <u32>::sse_decode(deserializer);
        let mut var_amountSat = <u64>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        let mut var_preimage = <Option<String>>::sse_decode(deserializer);
        let mut var_refundTxId = <Option<String>>::sse_decode(deserializer);
        let mut var_refundTxAmountSat = <Option<u64>>::sse_decode(deserializer);
        let mut var_paymentType = <crate::model::PaymentType>::sse_decode(deserializer);
        let mut var_status = <crate::model::PaymentState>::sse_decode(deserializer);
        return crate::model::Payment {
            tx_id: var_txId,
            swap_id: var_swapId,
            timestamp: var_timestamp,
            amount_sat: var_amountSat,
            fees_sat: var_feesSat,
            preimage: var_preimage,
            refund_tx_id: var_refundTxId,
            refund_tx_amount_sat: var_refundTxAmountSat,
            payment_type: var_paymentType,
            status: var_status,
        };
    }
}

impl SseDecode for crate::error::PaymentError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::error::PaymentError::AlreadyClaimed;
            }
            1 => {
                return crate::error::PaymentError::AlreadyPaid;
            }
            2 => {
                return crate::error::PaymentError::PaymentInProgress;
            }
            3 => {
                return crate::error::PaymentError::AmountOutOfRange;
            }
            4 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::Generic { err: var_err };
            }
            5 => {
                return crate::error::PaymentError::InvalidOrExpiredFees;
            }
            6 => {
                return crate::error::PaymentError::InsufficientFunds;
            }
            7 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::InvalidInvoice { err: var_err };
            }
            8 => {
                return crate::error::PaymentError::InvalidPreimage;
            }
            9 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::LwkError { err: var_err };
            }
            10 => {
                return crate::error::PaymentError::PairsNotFound;
            }
            11 => {
                return crate::error::PaymentError::PaymentTimeout;
            }
            12 => {
                return crate::error::PaymentError::PersistError;
            }
            13 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::ReceiveError { err: var_err };
            }
            14 => {
                let mut var_err = <String>::sse_decode(deserializer);
                let mut var_refundTxId = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::Refunded {
                    err: var_err,
                    refund_tx_id: var_refundTxId,
                };
            }
            15 => {
                return crate::error::PaymentError::SelfTransferNotSupported;
            }
            16 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::SendError { err: var_err };
            }
            17 => {
                let mut var_err = <String>::sse_decode(deserializer);
                return crate::error::PaymentError::SignerError { err: var_err };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::model::PaymentState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::model::PaymentState::Created,
            1 => crate::model::PaymentState::Pending,
            2 => crate::model::PaymentState::Complete,
            3 => crate::model::PaymentState::Failed,
            4 => crate::model::PaymentState::TimedOut,
            _ => unreachable!("Invalid variant for PaymentState: {}", inner),
        };
    }
}

impl SseDecode for crate::model::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::model::PaymentType::Receive,
            1 => crate::model::PaymentType::Send,
            _ => unreachable!("Invalid variant for PaymentType: {}", inner),
        };
    }
}

impl SseDecode for crate::model::PrepareReceiveRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payerAmountSat = <u64>::sse_decode(deserializer);
        return crate::model::PrepareReceiveRequest {
            payer_amount_sat: var_payerAmountSat,
        };
    }
}

impl SseDecode for crate::model::PrepareReceiveResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payerAmountSat = <u64>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        return crate::model::PrepareReceiveResponse {
            payer_amount_sat: var_payerAmountSat,
            fees_sat: var_feesSat,
        };
    }
}

impl SseDecode for crate::model::PrepareSendRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        return crate::model::PrepareSendRequest {
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::model::PrepareSendResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_invoice = <String>::sse_decode(deserializer);
        let mut var_feesSat = <u64>::sse_decode(deserializer);
        return crate::model::PrepareSendResponse {
            invoice: var_invoice,
            fees_sat: var_feesSat,
        };
    }
}

impl SseDecode for crate::model::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_invoice = <String>::sse_decode(deserializer);
        return crate::model::ReceivePaymentResponse {
            id: var_id,
            invoice: var_invoice,
        };
    }
}

impl SseDecode for crate::model::RestoreRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_backupPath = <Option<String>>::sse_decode(deserializer);
        return crate::model::RestoreRequest {
            backup_path: var_backupPath,
        };
    }
}

impl SseDecode for crate::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_hops = <Vec<crate::RouteHintHop>>::sse_decode(deserializer);
        return crate::RouteHint { hops: var_hops };
    }
}

impl SseDecode for crate::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_srcNodeId = <String>::sse_decode(deserializer);
        let mut var_shortChannelId = <u64>::sse_decode(deserializer);
        let mut var_feesBaseMsat = <u32>::sse_decode(deserializer);
        let mut var_feesProportionalMillionths = <u32>::sse_decode(deserializer);
        let mut var_cltvExpiryDelta = <u64>::sse_decode(deserializer);
        let mut var_htlcMinimumMsat = <Option<u64>>::sse_decode(deserializer);
        let mut var_htlcMaximumMsat = <Option<u64>>::sse_decode(deserializer);
        return crate::RouteHintHop {
            src_node_id: var_srcNodeId,
            short_channel_id: var_shortChannelId,
            fees_base_msat: var_feesBaseMsat,
            fees_proportional_millionths: var_feesProportionalMillionths,
            cltv_expiry_delta: var_cltvExpiryDelta,
            htlc_minimum_msat: var_htlcMinimumMsat,
            htlc_maximum_msat: var_htlcMaximumMsat,
        };
    }
}

impl SseDecode for crate::model::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_payment = <crate::model::Payment>::sse_decode(deserializer);
        return crate::model::SendPaymentResponse {
            payment: var_payment,
        };
    }
}

impl SseDecode for crate::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_result = <crate::AesSuccessActionDataResult>::sse_decode(deserializer);
                return crate::SuccessActionProcessed::Aes { result: var_result };
            }
            1 => {
                let mut var_data = <crate::MessageSuccessActionData>::sse_decode(deserializer);
                return crate::SuccessActionProcessed::Message { data: var_data };
            }
            2 => {
                let mut var_data = <crate::UrlSuccessActionData>::sse_decode(deserializer);
                return crate::SuccessActionProcessed::Url { data: var_data };
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_description = <String>::sse_decode(deserializer);
        let mut var_url = <String>::sse_decode(deserializer);
        return crate::UrlSuccessActionData {
            description: var_description,
            url: var_url,
        };
    }
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<BindingLiquidSdk> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<BindingLiquidSdk> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<BindingLiquidSdk>> for BindingLiquidSdk {
    fn into_into_dart(self) -> FrbWrapper<BindingLiquidSdk> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::AesSuccessActionDataDecrypted> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.description.into_into_dart().into_dart(),
            self.0.plaintext.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::AesSuccessActionDataDecrypted>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::AesSuccessActionDataDecrypted>>
    for crate::AesSuccessActionDataDecrypted
{
    fn into_into_dart(self) -> FrbWrapper<crate::AesSuccessActionDataDecrypted> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::AesSuccessActionDataResult> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::AesSuccessActionDataResult::Decrypted { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::AesSuccessActionDataResult::ErrorStatus { reason } => {
                [1.into_dart(), reason.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::AesSuccessActionDataResult>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::AesSuccessActionDataResult>>
    for crate::AesSuccessActionDataResult
{
    fn into_into_dart(self) -> FrbWrapper<crate::AesSuccessActionDataResult> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::BackupRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.backup_path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::BackupRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::BackupRequest>
    for crate::model::BackupRequest
{
    fn into_into_dart(self) -> crate::model::BackupRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::BindingEventListener {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.stream.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::BindingEventListener
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::BindingEventListener>
    for crate::bindings::BindingEventListener
{
    fn into_into_dart(self) -> crate::bindings::BindingEventListener {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::BitcoinAddressData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.address.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.amount_sat.into_into_dart().into_dart(),
            self.0.label.into_into_dart().into_dart(),
            self.0.message.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::BitcoinAddressData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::BitcoinAddressData>>
    for crate::BitcoinAddressData
{
    fn into_into_dart(self) -> FrbWrapper<crate::BitcoinAddressData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::Config {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.boltz_url.into_into_dart().into_dart(),
            self.electrum_url.into_into_dart().into_dart(),
            self.working_dir.into_into_dart().into_dart(),
            self.network.into_into_dart().into_dart(),
            self.payment_timeout_sec.into_into_dart().into_dart(),
            self.zero_conf_min_fee_rate.into_into_dart().into_dart(),
            self.zero_conf_max_amount_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::Config {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::Config> for crate::model::Config {
    fn into_into_dart(self) -> crate::model::Config {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::ConnectRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.mnemonic.into_into_dart().into_dart(),
            self.config.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::ConnectRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::ConnectRequest>
    for crate::model::ConnectRequest
{
    fn into_into_dart(self) -> crate::model::ConnectRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::GetInfoResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.balance_sat.into_into_dart().into_dart(),
            self.pending_send_sat.into_into_dart().into_dart(),
            self.pending_receive_sat.into_into_dart().into_dart(),
            self.pubkey.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::GetInfoResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::GetInfoResponse>
    for crate::model::GetInfoResponse
{
    fn into_into_dart(self) -> crate::model::GetInfoResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::InputType> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::InputType::BitcoinAddress { address } => {
                [0.into_dart(), address.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::Bolt11 { invoice } => {
                [1.into_dart(), invoice.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::NodeId { node_id } => {
                [2.into_dart(), node_id.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::Url { url } => {
                [3.into_dart(), url.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::LnUrlPay { data } => {
                [4.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::LnUrlWithdraw { data } => {
                [5.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::LnUrlAuth { data } => {
                [6.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::InputType::LnUrlError { data } => {
                [7.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::InputType> {}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::InputType>> for crate::InputType {
    fn into_into_dart(self) -> FrbWrapper<crate::InputType> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::LiquidNetwork {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Mainnet => 0.into_dart(),
            Self::Testnet => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::LiquidNetwork {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::LiquidNetwork>
    for crate::model::LiquidNetwork
{
    fn into_into_dart(self) -> crate::model::LiquidNetwork {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::error::LiquidSdkError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::error::LiquidSdkError::AlreadyStarted => [0.into_dart()].into_dart(),
            crate::error::LiquidSdkError::Generic { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::LiquidSdkError::NotStarted => [2.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::error::LiquidSdkError {}
impl flutter_rust_bridge::IntoIntoDart<crate::error::LiquidSdkError>
    for crate::error::LiquidSdkError
{
    fn into_into_dart(self) -> crate::error::LiquidSdkError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::LiquidSdkEvent {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::model::LiquidSdkEvent::PaymentFailed { details } => {
                [0.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::PaymentPending { details } => {
                [1.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::PaymentRefunded { details } => {
                [2.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::PaymentRefundPending { details } => {
                [3.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::PaymentSucceeded { details } => {
                [4.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::PaymentWaitingConfirmation { details } => {
                [5.into_dart(), details.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LiquidSdkEvent::Synced => [6.into_dart()].into_dart(),
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::LiquidSdkEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::LiquidSdkEvent>
    for crate::model::LiquidSdkEvent
{
    fn into_into_dart(self) -> crate::model::LiquidSdkEvent {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LNInvoice> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.bolt11.into_into_dart().into_dart(),
            self.0.network.into_into_dart().into_dart(),
            self.0.payee_pubkey.into_into_dart().into_dart(),
            self.0.payment_hash.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
            self.0.description_hash.into_into_dart().into_dart(),
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.expiry.into_into_dart().into_dart(),
            self.0.routing_hints.into_into_dart().into_dart(),
            self.0.payment_secret.into_into_dart().into_dart(),
            self.0
                .min_final_cltv_expiry_delta
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::LNInvoice> {}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LNInvoice>> for crate::LNInvoice {
    fn into_into_dart(self) -> FrbWrapper<crate::LNInvoice> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlAuthError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bindings::duplicates::LnUrlAuthError::Generic { err } => {
                [0.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlAuthError::InvalidUri { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlAuthError::ServiceConnectivity { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlAuthError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlAuthError>
    for crate::bindings::duplicates::LnUrlAuthError
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlAuthError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlAuthRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.k1.into_into_dart().into_dart(),
            self.0.action.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlAuthRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlAuthRequestData>>
    for crate::LnUrlAuthRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlAuthRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlCallbackStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bindings::duplicates::LnUrlCallbackStatus::Ok => [0.into_dart()].into_dart(),
            crate::bindings::duplicates::LnUrlCallbackStatus::ErrorStatus { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlCallbackStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlCallbackStatus>
    for crate::bindings::duplicates::LnUrlCallbackStatus
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlCallbackStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlErrorData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.reason.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlErrorData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlErrorData>>
    for crate::LnUrlErrorData
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlErrorData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlPayError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bindings::duplicates::LnUrlPayError::AlreadyPaid => [0.into_dart()].into_dart(),
            crate::bindings::duplicates::LnUrlPayError::Generic { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidAmount { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidInvoice { err } => {
                [3.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidNetwork { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidUri { err } => {
                [5.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::InvoiceExpired { err } => {
                [6.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::PaymentFailed { err } => {
                [7.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::PaymentTimeout { err } => {
                [8.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::RouteNotFound { err } => {
                [9.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::RouteTooExpensive { err } => {
                [10.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlPayError::ServiceConnectivity { err } => {
                [11.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlPayError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlPayError>
    for crate::bindings::duplicates::LnUrlPayError
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlPayError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlPayErrorData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.payment_hash.into_into_dart().into_dart(),
            self.0.reason.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlPayErrorData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlPayErrorData>>
    for crate::LnUrlPayErrorData
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlPayErrorData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlPayRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.data.into_into_dart().into_dart(),
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.comment.into_into_dart().into_dart(),
            self.0.payment_label.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlPayRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlPayRequest>>
    for crate::LnUrlPayRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlPayRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlPayRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.callback.into_into_dart().into_dart(),
            self.0.min_sendable.into_into_dart().into_dart(),
            self.0.max_sendable.into_into_dart().into_dart(),
            self.0.metadata_str.into_into_dart().into_dart(),
            self.0.comment_allowed.into_into_dart().into_dart(),
            self.0.domain.into_into_dart().into_dart(),
            self.0.allows_nostr.into_into_dart().into_dart(),
            self.0.nostr_pubkey.into_into_dart().into_dart(),
            self.0.ln_address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlPayRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlPayRequestData>>
    for crate::LnUrlPayRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlPayRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::LnUrlPayResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::model::LnUrlPayResult::EndpointSuccess { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LnUrlPayResult::EndpointError { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::model::LnUrlPayResult::PayError { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::LnUrlPayResult {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::LnUrlPayResult>
    for crate::model::LnUrlPayResult
{
    fn into_into_dart(self) -> crate::model::LnUrlPayResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::LnUrlPaySuccessData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payment.into_into_dart().into_dart(),
            self.success_action.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::LnUrlPaySuccessData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::LnUrlPaySuccessData>
    for crate::model::LnUrlPaySuccessData
{
    fn into_into_dart(self) -> crate::model::LnUrlPaySuccessData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlWithdrawError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bindings::duplicates::LnUrlWithdrawError::Generic { err } => {
                [0.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidAmount { err } => {
                [1.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidInvoice { err } => {
                [2.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidUri { err } => {
                [3.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawError::ServiceConnectivity { err } => {
                [5.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlWithdrawError
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlWithdrawError>
    for crate::bindings::duplicates::LnUrlWithdrawError
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlWithdrawError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlWithdrawRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.data.into_into_dart().into_dart(),
            self.0.amount_msat.into_into_dart().into_dart(),
            self.0.description.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlWithdrawRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlWithdrawRequest>>
    for crate::LnUrlWithdrawRequest
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlWithdrawRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::LnUrlWithdrawRequestData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.callback.into_into_dart().into_dart(),
            self.0.k1.into_into_dart().into_dart(),
            self.0.default_description.into_into_dart().into_dart(),
            self.0.min_withdrawable.into_into_dart().into_dart(),
            self.0.max_withdrawable.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::LnUrlWithdrawRequestData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::LnUrlWithdrawRequestData>>
    for crate::LnUrlWithdrawRequestData
{
    fn into_into_dart(self) -> FrbWrapper<crate::LnUrlWithdrawRequestData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlWithdrawResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::bindings::duplicates::LnUrlWithdrawResult::Ok { data } => {
                [0.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::bindings::duplicates::LnUrlWithdrawResult::ErrorStatus { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlWithdrawResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlWithdrawResult>
    for crate::bindings::duplicates::LnUrlWithdrawResult
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlWithdrawResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::bindings::duplicates::LnUrlWithdrawSuccessData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bindings::duplicates::LnUrlWithdrawSuccessData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bindings::duplicates::LnUrlWithdrawSuccessData>
    for crate::bindings::duplicates::LnUrlWithdrawSuccessData
{
    fn into_into_dart(self) -> crate::bindings::duplicates::LnUrlWithdrawSuccessData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.line.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::LogEntry> for crate::model::LogEntry {
    fn into_into_dart(self) -> crate::model::LogEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::MessageSuccessActionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.message.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::MessageSuccessActionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::MessageSuccessActionData>>
    for crate::MessageSuccessActionData
{
    fn into_into_dart(self) -> FrbWrapper<crate::MessageSuccessActionData> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::Network> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::Network::Bitcoin => 0.into_dart(),
            crate::Network::Testnet => 1.into_dart(),
            crate::Network::Signet => 2.into_dart(),
            crate::Network::Regtest => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::Network> {}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::Network>> for crate::Network {
    fn into_into_dart(self) -> FrbWrapper<crate::Network> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::Payment {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.tx_id.into_into_dart().into_dart(),
            self.swap_id.into_into_dart().into_dart(),
            self.timestamp.into_into_dart().into_dart(),
            self.amount_sat.into_into_dart().into_dart(),
            self.fees_sat.into_into_dart().into_dart(),
            self.preimage.into_into_dart().into_dart(),
            self.refund_tx_id.into_into_dart().into_dart(),
            self.refund_tx_amount_sat.into_into_dart().into_dart(),
            self.payment_type.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::Payment {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::Payment> for crate::model::Payment {
    fn into_into_dart(self) -> crate::model::Payment {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::error::PaymentError {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::error::PaymentError::AlreadyClaimed => [0.into_dart()].into_dart(),
            crate::error::PaymentError::AlreadyPaid => [1.into_dart()].into_dart(),
            crate::error::PaymentError::PaymentInProgress => [2.into_dart()].into_dart(),
            crate::error::PaymentError::AmountOutOfRange => [3.into_dart()].into_dart(),
            crate::error::PaymentError::Generic { err } => {
                [4.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::PaymentError::InvalidOrExpiredFees => [5.into_dart()].into_dart(),
            crate::error::PaymentError::InsufficientFunds => [6.into_dart()].into_dart(),
            crate::error::PaymentError::InvalidInvoice { err } => {
                [7.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::PaymentError::InvalidPreimage => [8.into_dart()].into_dart(),
            crate::error::PaymentError::LwkError { err } => {
                [9.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::PaymentError::PairsNotFound => [10.into_dart()].into_dart(),
            crate::error::PaymentError::PaymentTimeout => [11.into_dart()].into_dart(),
            crate::error::PaymentError::PersistError => [12.into_dart()].into_dart(),
            crate::error::PaymentError::ReceiveError { err } => {
                [13.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::PaymentError::Refunded { err, refund_tx_id } => [
                14.into_dart(),
                err.into_into_dart().into_dart(),
                refund_tx_id.into_into_dart().into_dart(),
            ]
            .into_dart(),
            crate::error::PaymentError::SelfTransferNotSupported => [15.into_dart()].into_dart(),
            crate::error::PaymentError::SendError { err } => {
                [16.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            crate::error::PaymentError::SignerError { err } => {
                [17.into_dart(), err.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::error::PaymentError {}
impl flutter_rust_bridge::IntoIntoDart<crate::error::PaymentError> for crate::error::PaymentError {
    fn into_into_dart(self) -> crate::error::PaymentError {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PaymentState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Created => 0.into_dart(),
            Self::Pending => 1.into_dart(),
            Self::Complete => 2.into_dart(),
            Self::Failed => 3.into_dart(),
            Self::TimedOut => 4.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::PaymentState {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PaymentState> for crate::model::PaymentState {
    fn into_into_dart(self) -> crate::model::PaymentState {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PaymentType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Receive => 0.into_dart(),
            Self::Send => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::PaymentType {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PaymentType> for crate::model::PaymentType {
    fn into_into_dart(self) -> crate::model::PaymentType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PrepareReceiveRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.payer_amount_sat.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::PrepareReceiveRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PrepareReceiveRequest>
    for crate::model::PrepareReceiveRequest
{
    fn into_into_dart(self) -> crate::model::PrepareReceiveRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PrepareReceiveResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.payer_amount_sat.into_into_dart().into_dart(),
            self.fees_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::PrepareReceiveResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PrepareReceiveResponse>
    for crate::model::PrepareReceiveResponse
{
    fn into_into_dart(self) -> crate::model::PrepareReceiveResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PrepareSendRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.invoice.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::PrepareSendRequest
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PrepareSendRequest>
    for crate::model::PrepareSendRequest
{
    fn into_into_dart(self) -> crate::model::PrepareSendRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::PrepareSendResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.invoice.into_into_dart().into_dart(),
            self.fees_sat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::PrepareSendResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::PrepareSendResponse>
    for crate::model::PrepareSendResponse
{
    fn into_into_dart(self) -> crate::model::PrepareSendResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::ReceivePaymentResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.id.into_into_dart().into_dart(),
            self.invoice.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::ReceivePaymentResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::ReceivePaymentResponse>
    for crate::model::ReceivePaymentResponse
{
    fn into_into_dart(self) -> crate::model::ReceivePaymentResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::RestoreRequest {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.backup_path.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::model::RestoreRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::model::RestoreRequest>
    for crate::model::RestoreRequest
{
    fn into_into_dart(self) -> crate::model::RestoreRequest {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::RouteHint> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.hops.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<crate::RouteHint> {}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::RouteHint>> for crate::RouteHint {
    fn into_into_dart(self) -> FrbWrapper<crate::RouteHint> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::RouteHintHop> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.src_node_id.into_into_dart().into_dart(),
            self.0.short_channel_id.into_into_dart().into_dart(),
            self.0.fees_base_msat.into_into_dart().into_dart(),
            self.0
                .fees_proportional_millionths
                .into_into_dart()
                .into_dart(),
            self.0.cltv_expiry_delta.into_into_dart().into_dart(),
            self.0.htlc_minimum_msat.into_into_dart().into_dart(),
            self.0.htlc_maximum_msat.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::RouteHintHop>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::RouteHintHop>> for crate::RouteHintHop {
    fn into_into_dart(self) -> FrbWrapper<crate::RouteHintHop> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::model::SendPaymentResponse {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.payment.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::model::SendPaymentResponse
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::model::SendPaymentResponse>
    for crate::model::SendPaymentResponse
{
    fn into_into_dart(self) -> crate::model::SendPaymentResponse {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::SuccessActionProcessed> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            crate::SuccessActionProcessed::Aes { result } => {
                [0.into_dart(), result.into_into_dart().into_dart()].into_dart()
            }
            crate::SuccessActionProcessed::Message { data } => {
                [1.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            crate::SuccessActionProcessed::Url { data } => {
                [2.into_dart(), data.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::SuccessActionProcessed>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::SuccessActionProcessed>>
    for crate::SuccessActionProcessed
{
    fn into_into_dart(self) -> FrbWrapper<crate::SuccessActionProcessed> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<crate::UrlSuccessActionData> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.description.into_into_dart().into_dart(),
            self.0.url.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<crate::UrlSuccessActionData>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<crate::UrlSuccessActionData>>
    for crate::UrlSuccessActionData
{
    fn into_into_dart(self) -> FrbWrapper<crate::UrlSuccessActionData> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for BindingLiquidSdk {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, StdArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueNom<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BindingLiquidSdk>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for StreamSink<crate::model::LiquidSdkEvent, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode
    for StreamSink<crate::model::LogEntry, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::AesSuccessActionDataDecrypted {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.plaintext, serializer);
    }
}

impl SseEncode for crate::AesSuccessActionDataResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::AesSuccessActionDataResult::Decrypted { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::AesSuccessActionDataDecrypted>::sse_encode(data, serializer);
            }
            crate::AesSuccessActionDataResult::ErrorStatus { reason } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(reason, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::model::BackupRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.backup_path, serializer);
    }
}

impl SseEncode for crate::bindings::BindingEventListener {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <StreamSink<crate::model::LiquidSdkEvent,flutter_rust_bridge::for_generated::DcoCodec>>::sse_encode(self.stream, serializer);
    }
}

impl SseEncode for crate::BitcoinAddressData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.address, serializer);
        <crate::Network>::sse_encode(self.network, serializer);
        <Option<u64>>::sse_encode(self.amount_sat, serializer);
        <Option<String>>::sse_encode(self.label, serializer);
        <Option<String>>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::model::Config {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.boltz_url, serializer);
        <String>::sse_encode(self.electrum_url, serializer);
        <String>::sse_encode(self.working_dir, serializer);
        <crate::model::LiquidNetwork>::sse_encode(self.network, serializer);
        <u64>::sse_encode(self.payment_timeout_sec, serializer);
        <f32>::sse_encode(self.zero_conf_min_fee_rate, serializer);
        <Option<u64>>::sse_encode(self.zero_conf_max_amount_sat, serializer);
    }
}

impl SseEncode for crate::model::ConnectRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.mnemonic, serializer);
        <crate::model::Config>::sse_encode(self.config, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::model::GetInfoResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.balance_sat, serializer);
        <u64>::sse_encode(self.pending_send_sat, serializer);
        <u64>::sse_encode(self.pending_receive_sat, serializer);
        <String>::sse_encode(self.pubkey, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for crate::InputType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::InputType::BitcoinAddress { address } => {
                <i32>::sse_encode(0, serializer);
                <crate::BitcoinAddressData>::sse_encode(address, serializer);
            }
            crate::InputType::Bolt11 { invoice } => {
                <i32>::sse_encode(1, serializer);
                <crate::LNInvoice>::sse_encode(invoice, serializer);
            }
            crate::InputType::NodeId { node_id } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(node_id, serializer);
            }
            crate::InputType::Url { url } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(url, serializer);
            }
            crate::InputType::LnUrlPay { data } => {
                <i32>::sse_encode(4, serializer);
                <crate::LnUrlPayRequestData>::sse_encode(data, serializer);
            }
            crate::InputType::LnUrlWithdraw { data } => {
                <i32>::sse_encode(5, serializer);
                <crate::LnUrlWithdrawRequestData>::sse_encode(data, serializer);
            }
            crate::InputType::LnUrlAuth { data } => {
                <i32>::sse_encode(6, serializer);
                <crate::LnUrlAuthRequestData>::sse_encode(data, serializer);
            }
            crate::InputType::LnUrlError { data } => {
                <i32>::sse_encode(7, serializer);
                <crate::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::model::LiquidNetwork {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::model::LiquidNetwork::Mainnet => 0,
                crate::model::LiquidNetwork::Testnet => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::error::LiquidSdkError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::error::LiquidSdkError::AlreadyStarted => {
                <i32>::sse_encode(0, serializer);
            }
            crate::error::LiquidSdkError::Generic { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::LiquidSdkError::NotStarted => {
                <i32>::sse_encode(2, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::model::LiquidSdkEvent {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::model::LiquidSdkEvent::PaymentFailed { details } => {
                <i32>::sse_encode(0, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::PaymentPending { details } => {
                <i32>::sse_encode(1, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::PaymentRefunded { details } => {
                <i32>::sse_encode(2, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::PaymentRefundPending { details } => {
                <i32>::sse_encode(3, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::PaymentSucceeded { details } => {
                <i32>::sse_encode(4, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::PaymentWaitingConfirmation { details } => {
                <i32>::sse_encode(5, serializer);
                <crate::model::Payment>::sse_encode(details, serializer);
            }
            crate::model::LiquidSdkEvent::Synced => {
                <i32>::sse_encode(6, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for Vec<crate::model::Payment> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::model::Payment>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::RouteHint> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::RouteHint>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::RouteHintHop> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::RouteHintHop>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::LNInvoice {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.bolt11, serializer);
        <crate::Network>::sse_encode(self.network, serializer);
        <String>::sse_encode(self.payee_pubkey, serializer);
        <String>::sse_encode(self.payment_hash, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
        <Option<String>>::sse_encode(self.description_hash, serializer);
        <Option<u64>>::sse_encode(self.amount_msat, serializer);
        <u64>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.expiry, serializer);
        <Vec<crate::RouteHint>>::sse_encode(self.routing_hints, serializer);
        <Vec<u8>>::sse_encode(self.payment_secret, serializer);
        <u64>::sse_encode(self.min_final_cltv_expiry_delta, serializer);
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlAuthError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bindings::duplicates::LnUrlAuthError::Generic { err } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlAuthError::InvalidUri { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlAuthError::ServiceConnectivity { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::LnUrlAuthRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.k1, serializer);
        <Option<String>>::sse_encode(self.action, serializer);
        <String>::sse_encode(self.domain, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlCallbackStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bindings::duplicates::LnUrlCallbackStatus::Ok => {
                <i32>::sse_encode(0, serializer);
            }
            crate::bindings::duplicates::LnUrlCallbackStatus::ErrorStatus { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::LnUrlErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlPayError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bindings::duplicates::LnUrlPayError::AlreadyPaid => {
                <i32>::sse_encode(0, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::Generic { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidAmount { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidInvoice { err } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidNetwork { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::InvalidUri { err } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::InvoiceExpired { err } => {
                <i32>::sse_encode(6, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::PaymentFailed { err } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::PaymentTimeout { err } => {
                <i32>::sse_encode(8, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::RouteNotFound { err } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::RouteTooExpensive { err } => {
                <i32>::sse_encode(10, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlPayError::ServiceConnectivity { err } => {
                <i32>::sse_encode(11, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::LnUrlPayErrorData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.payment_hash, serializer);
        <String>::sse_encode(self.reason, serializer);
    }
}

impl SseEncode for crate::LnUrlPayRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::LnUrlPayRequestData>::sse_encode(self.data, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.comment, serializer);
        <Option<String>>::sse_encode(self.payment_label, serializer);
    }
}

impl SseEncode for crate::LnUrlPayRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <u64>::sse_encode(self.min_sendable, serializer);
        <u64>::sse_encode(self.max_sendable, serializer);
        <String>::sse_encode(self.metadata_str, serializer);
        <u16>::sse_encode(self.comment_allowed, serializer);
        <String>::sse_encode(self.domain, serializer);
        <bool>::sse_encode(self.allows_nostr, serializer);
        <Option<String>>::sse_encode(self.nostr_pubkey, serializer);
        <Option<String>>::sse_encode(self.ln_address, serializer);
    }
}

impl SseEncode for crate::model::LnUrlPayResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::model::LnUrlPayResult::EndpointSuccess { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::model::LnUrlPaySuccessData>::sse_encode(data, serializer);
            }
            crate::model::LnUrlPayResult::EndpointError { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::LnUrlErrorData>::sse_encode(data, serializer);
            }
            crate::model::LnUrlPayResult::PayError { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::LnUrlPayErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::model::LnUrlPaySuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::model::Payment>::sse_encode(self.payment, serializer);
        <Option<crate::SuccessActionProcessed>>::sse_encode(self.success_action, serializer);
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlWithdrawError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bindings::duplicates::LnUrlWithdrawError::Generic { err } => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidAmount { err } => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidInvoice { err } => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvalidUri { err } => {
                <i32>::sse_encode(3, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlWithdrawError::InvoiceNoRoutingHints { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::bindings::duplicates::LnUrlWithdrawError::ServiceConnectivity { err } => {
                <i32>::sse_encode(5, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::LnUrlWithdrawRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::LnUrlWithdrawRequestData>::sse_encode(self.data, serializer);
        <u64>::sse_encode(self.amount_msat, serializer);
        <Option<String>>::sse_encode(self.description, serializer);
    }
}

impl SseEncode for crate::LnUrlWithdrawRequestData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.callback, serializer);
        <String>::sse_encode(self.k1, serializer);
        <String>::sse_encode(self.default_description, serializer);
        <u64>::sse_encode(self.min_withdrawable, serializer);
        <u64>::sse_encode(self.max_withdrawable, serializer);
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlWithdrawResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::bindings::duplicates::LnUrlWithdrawResult::Ok { data } => {
                <i32>::sse_encode(0, serializer);
                <crate::bindings::duplicates::LnUrlWithdrawSuccessData>::sse_encode(
                    data, serializer,
                );
            }
            crate::bindings::duplicates::LnUrlWithdrawResult::ErrorStatus { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::LnUrlErrorData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::bindings::duplicates::LnUrlWithdrawSuccessData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::LNInvoice>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::model::LogEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.line, serializer);
        <String>::sse_encode(self.level, serializer);
    }
}

impl SseEncode for crate::MessageSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.message, serializer);
    }
}

impl SseEncode for crate::Network {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::Network::Bitcoin => 0,
                crate::Network::Testnet => 1,
                crate::Network::Signet => 2,
                crate::Network::Regtest => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::SuccessActionProcessed> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::SuccessActionProcessed>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<u64> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <u64>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::model::Payment {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.tx_id, serializer);
        <Option<String>>::sse_encode(self.swap_id, serializer);
        <u32>::sse_encode(self.timestamp, serializer);
        <u64>::sse_encode(self.amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
        <Option<String>>::sse_encode(self.preimage, serializer);
        <Option<String>>::sse_encode(self.refund_tx_id, serializer);
        <Option<u64>>::sse_encode(self.refund_tx_amount_sat, serializer);
        <crate::model::PaymentType>::sse_encode(self.payment_type, serializer);
        <crate::model::PaymentState>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::error::PaymentError {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::error::PaymentError::AlreadyClaimed => {
                <i32>::sse_encode(0, serializer);
            }
            crate::error::PaymentError::AlreadyPaid => {
                <i32>::sse_encode(1, serializer);
            }
            crate::error::PaymentError::PaymentInProgress => {
                <i32>::sse_encode(2, serializer);
            }
            crate::error::PaymentError::AmountOutOfRange => {
                <i32>::sse_encode(3, serializer);
            }
            crate::error::PaymentError::Generic { err } => {
                <i32>::sse_encode(4, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::PaymentError::InvalidOrExpiredFees => {
                <i32>::sse_encode(5, serializer);
            }
            crate::error::PaymentError::InsufficientFunds => {
                <i32>::sse_encode(6, serializer);
            }
            crate::error::PaymentError::InvalidInvoice { err } => {
                <i32>::sse_encode(7, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::PaymentError::InvalidPreimage => {
                <i32>::sse_encode(8, serializer);
            }
            crate::error::PaymentError::LwkError { err } => {
                <i32>::sse_encode(9, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::PaymentError::PairsNotFound => {
                <i32>::sse_encode(10, serializer);
            }
            crate::error::PaymentError::PaymentTimeout => {
                <i32>::sse_encode(11, serializer);
            }
            crate::error::PaymentError::PersistError => {
                <i32>::sse_encode(12, serializer);
            }
            crate::error::PaymentError::ReceiveError { err } => {
                <i32>::sse_encode(13, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::PaymentError::Refunded { err, refund_tx_id } => {
                <i32>::sse_encode(14, serializer);
                <String>::sse_encode(err, serializer);
                <String>::sse_encode(refund_tx_id, serializer);
            }
            crate::error::PaymentError::SelfTransferNotSupported => {
                <i32>::sse_encode(15, serializer);
            }
            crate::error::PaymentError::SendError { err } => {
                <i32>::sse_encode(16, serializer);
                <String>::sse_encode(err, serializer);
            }
            crate::error::PaymentError::SignerError { err } => {
                <i32>::sse_encode(17, serializer);
                <String>::sse_encode(err, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for crate::model::PaymentState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::model::PaymentState::Created => 0,
                crate::model::PaymentState::Pending => 1,
                crate::model::PaymentState::Complete => 2,
                crate::model::PaymentState::Failed => 3,
                crate::model::PaymentState::TimedOut => 4,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::model::PaymentType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::model::PaymentType::Receive => 0,
                crate::model::PaymentType::Send => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::model::PrepareReceiveRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.payer_amount_sat, serializer);
    }
}

impl SseEncode for crate::model::PrepareReceiveResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u64>::sse_encode(self.payer_amount_sat, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
    }
}

impl SseEncode for crate::model::PrepareSendRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::model::PrepareSendResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.invoice, serializer);
        <u64>::sse_encode(self.fees_sat, serializer);
    }
}

impl SseEncode for crate::model::ReceivePaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.invoice, serializer);
    }
}

impl SseEncode for crate::model::RestoreRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Option<String>>::sse_encode(self.backup_path, serializer);
    }
}

impl SseEncode for crate::RouteHint {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<crate::RouteHintHop>>::sse_encode(self.hops, serializer);
    }
}

impl SseEncode for crate::RouteHintHop {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.src_node_id, serializer);
        <u64>::sse_encode(self.short_channel_id, serializer);
        <u32>::sse_encode(self.fees_base_msat, serializer);
        <u32>::sse_encode(self.fees_proportional_millionths, serializer);
        <u64>::sse_encode(self.cltv_expiry_delta, serializer);
        <Option<u64>>::sse_encode(self.htlc_minimum_msat, serializer);
        <Option<u64>>::sse_encode(self.htlc_maximum_msat, serializer);
    }
}

impl SseEncode for crate::model::SendPaymentResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::model::Payment>::sse_encode(self.payment, serializer);
    }
}

impl SseEncode for crate::SuccessActionProcessed {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::SuccessActionProcessed::Aes { result } => {
                <i32>::sse_encode(0, serializer);
                <crate::AesSuccessActionDataResult>::sse_encode(result, serializer);
            }
            crate::SuccessActionProcessed::Message { data } => {
                <i32>::sse_encode(1, serializer);
                <crate::MessageSuccessActionData>::sse_encode(data, serializer);
            }
            crate::SuccessActionProcessed::Url { data } => {
                <i32>::sse_encode(2, serializer);
                <crate::UrlSuccessActionData>::sse_encode(data, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::UrlSuccessActionData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.description, serializer);
        <String>::sse_encode(self.url, serializer);
    }
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
