[Error]
enum LiquidSdkError {
    "AlreadyStarted",
    "Generic",
    "NotStarted",
};

[Error]
enum PaymentError {
    "AlreadyClaimed",
    "AmountOutOfRange",
    "Generic",
    "InvalidOrExpiredFees",
    "InsufficientFunds",
    "InvalidInvoice",
    "InvalidPreimage",
    "LwkError",
    "PairsNotFound",
    "PaymentTimeout",
    "PersistError",
    "Refunded",
    "SendError",
    "SignerError",
};

enum Network {
    "Mainnet",
    "Testnet",
};

dictionary ConnectRequest {
    string mnemonic;
    Network network;
    string? data_dir = null;
};

dictionary GetInfoRequest {
    boolean with_scan;
};

dictionary GetInfoResponse {
    u64 balance_sat;
    u64 pending_send_sat;
    u64 pending_receive_sat;
    string pubkey;
};

dictionary PrepareSendRequest {
    string invoice;
};

dictionary PrepareSendResponse {
    string invoice;
    u64 fees_sat;
};

dictionary SendPaymentResponse {
    Payment payment;
};

dictionary PrepareReceiveRequest {
    u64 payer_amount_sat;
};

dictionary PrepareReceiveResponse {
    u64 payer_amount_sat;
    u64 fees_sat;
};

dictionary ReceivePaymentResponse {
    string id;
    string invoice;
};

dictionary BackupRequest {
    string? backup_path = null;
};

dictionary RestoreRequest {
    string? backup_path = null;
};

dictionary RouteHint {
    sequence<RouteHintHop> hops;
};

dictionary RouteHintHop {
     string src_node_id;
     u64 short_channel_id;
     u32 fees_base_msat;
     u32 fees_proportional_millionths;
     u64 cltv_expiry_delta;
     u64? htlc_minimum_msat;
     u64? htlc_maximum_msat;
 };

dictionary LNInvoice {
    string bolt11;
    Network network;
    string payee_pubkey;
    string payment_hash;
    string? description;
    string? description_hash;
    u64? amount_msat;
    u64 timestamp;
    u64 expiry;
    sequence<RouteHint> routing_hints;
    sequence<u8> payment_secret;
    u64 min_final_cltv_expiry_delta;
};

dictionary Payment {
    string tx_id;
    string? swap_id = null;
    u32 timestamp;
    u64 amount_sat;
    u64? fees_sat = null;
    string? preimage = null;
    string? refund_tx_id = null;
    u64? refund_tx_amount_sat = null;
    PaymentType payment_type;
    PaymentState status;
};

enum PaymentType {
    "Receive",
    "Send",
};

enum PaymentState {
    "Created",
    "Pending",
    "Complete",
    "Failed",
    "TimedOut",
};

[Enum]
interface LiquidSdkEvent {
    PaymentFailed(Payment details);
    PaymentPending(Payment details);
    PaymentRefunded(Payment details);
    PaymentRefundPending(Payment details);
    PaymentSucceed(Payment details);
    PaymentWaitingConfirmation(Payment details);
    Synced();
};

callback interface EventListener {    
    void on_event(LiquidSdkEvent e);
};

namespace breez_liquid_sdk {
    [Throws=LiquidSdkError]
    BindingLiquidSdk connect(ConnectRequest req);

    [Throws=PaymentError]
    LNInvoice parse_invoice(string invoice);
};

interface BindingLiquidSdk {
    [Throws=LiquidSdkError]
    string add_event_listener(EventListener listener);

    [Throws=LiquidSdkError]
    void remove_event_listener(string id);

    [Throws=LiquidSdkError]
    GetInfoResponse get_info(GetInfoRequest req);

    [Throws=PaymentError]
    PrepareSendResponse prepare_send_payment(PrepareSendRequest req);

    [Throws=PaymentError]
    SendPaymentResponse send_payment(PrepareSendResponse req);

    [Throws=PaymentError]
    PrepareReceiveResponse prepare_receive_payment(PrepareReceiveRequest req);

    [Throws=PaymentError]
    ReceivePaymentResponse receive_payment(PrepareReceiveResponse req);

    [Throws=PaymentError]
    sequence<Payment> list_payments();

    [Throws=LiquidSdkError]
    void sync();

    [Throws=LiquidSdkError]
    void backup(BackupRequest req);

    [Throws=LiquidSdkError]
    void restore(RestoreRequest req);

    [Throws=LiquidSdkError]
    void disconnect();
};
