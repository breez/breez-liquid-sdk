[Error]
enum LiquidSdkError {
    "Generic",
};

[Error]
enum PaymentError {
    "AlreadyClaimed",
    "AmountOutOfRange",
    "Generic",
    "InvalidOrExpiredFees",
    "InsufficientFunds",
    "InvalidInvoice",
    "InvalidPreimage",
    "LwkError",
    "PairsNotFound",
    "PersistError",
    "Refunded",
    "SendError",
    "SignerError",
};

enum Network {
    "Liquid",
    "LiquidTestnet",
};

dictionary ConnectRequest {
    string mnemonic;
    Network network;
    string? data_dir = null;
};

dictionary GetInfoRequest {
    boolean with_scan;
};

dictionary GetInfoResponse {
    u64 balance_sat;
    u64 pending_send_sat;
    u64 pending_receive_sat;
    string pubkey;
};

dictionary PrepareSendRequest {
    string invoice;
};

dictionary PrepareSendResponse {
    string invoice;
    u64 fees_sat;
};

dictionary SendPaymentResponse {
    string txid;
};

dictionary PrepareReceiveRequest {
    u64 payer_amount_sat;
};

dictionary PrepareReceiveResponse {
    u64 payer_amount_sat;
    u64 fees_sat;
};

dictionary ReceivePaymentResponse {
    string id;
    string invoice;
};

dictionary RestoreRequest {
    string? backup_path = null;
};

namespace breez_liquid_sdk {
    [Throws=LiquidSdkError]
    BindingLiquidSdk connect(ConnectRequest req);
};

interface BindingLiquidSdk {
    [Throws=LiquidSdkError]
    GetInfoResponse get_info(GetInfoRequest req);

    [Throws=PaymentError]
    PrepareSendResponse prepare_send_payment(PrepareSendRequest req);

    [Throws=PaymentError]
    SendPaymentResponse send_payment(PrepareSendResponse req);

    [Throws=PaymentError]
    PrepareReceiveResponse prepare_receive_payment(PrepareReceiveRequest req);

    [Throws=PaymentError]
    ReceivePaymentResponse receive_payment(PrepareReceiveResponse req);

    [Throws=LiquidSdkError]
    void sync();

    [Throws=LiquidSdkError]
    void backup();

    [Throws=LiquidSdkError]
    void restore(RestoreRequest req);
};
